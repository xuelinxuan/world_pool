
name: CD

permissions:
  id-token: write
  contents: read

# on:
#   workflow_run:
#     workflows: ["CI"]   # 必须和 CI workflow 的 name 完全一致
#     types: [completed]
#     branches: [main]       # 只有 main 上的 CI 完成才触发

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    name: II.CD run_code
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}  # 仅当 CI 成功
    runs-on: ubuntu-latest
    steps:
    - name: 0.Check out Git repository
      uses: actions/checkout@v4

    - name: 1.Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}



    - name: 2.Start EC2 instance
      run: |
        aws ec2 start-instances         --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        #确认连接成功
        aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        echo "✅ EC2 instance is running"

    - name: 3) Run Airflow via SSM (compose v2)
      run: |
        set -euo pipefail
    
        SCRIPT="/bin/bash -lc 'set -e; cd /home/ubuntu/world_pool; sudo systemctl start docker || true; sudo docker compose up -d; sudo docker compose ps'"
        jq -n --arg s "$SCRIPT" '{commands: [$s]}' > params.json
    
        CMD_ID=$(aws ssm send-command \
          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Start Airflow via SSM (compose v2)" \
          --region ${{ secrets.AWS_REGION }} \
          --parameters file://params.json \
          --query "Command.CommandId" --output text)
    
        echo "SSM Command ID: $CMD_ID"
    
        set +e
        aws ssm wait command-executed --command-id "$CMD_ID" --instance-id ${{ secrets.EC2_INSTANCE_ID }} --region ${{ secrets.AWS_REGION }}
        set -e
    
        aws ssm get-command-invocation \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}' \
          --output json
    # - name: 2b) Find docker-compose.yml on EC2 (via SSM)
    #   run: |
    #     set -euo pipefail
    
    #     # 生成 parameters（避免转义问题）
    #     SCRIPT="/bin/bash -lc 'set -e; echo ==== search docker-compose.yml; sudo find / -maxdepth 4 -type f -name docker-compose.yml 2>/dev/null | head -n 20 | xargs -r -I{} sh -c \"echo {}; dirname {}\"'"
    #     jq -n --arg s "$SCRIPT" '{commands: [$s]}' > params.json
    
    #     # 发送命令
    #     CMD_ID=$(aws ssm send-command \
    #       --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
    #       --document-name "AWS-RunShellScript" \
    #       --region ${{ secrets.AWS_REGION }} \
    #       --comment "Locate docker-compose.yml" \
    #       --parameters file://params.json \
    #       --query "Command.CommandId" --output text)
    
    #     echo "SSM Command ID: $CMD_ID"
    
        # 等待执行并取回输出
        aws ssm wait command-executed \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }}
    
        aws ssm get-command-invocation \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query '{StdOut:StandardOutputContent, StdErr:StandardErrorContent}' \
          --output json

        
    # - name: 3.Run Airflow via SSM (debug, v1/v2; no-escape)
    #   run: |
    #     set -euo pipefail
    
    #     SCRIPT="/bin/bash -lc 'set -e; \
    #       echo ==== whoami && whoami; \
    #       echo ==== pwd && pwd; \
    #       cd /opt/airflow; \
    #       echo ==== try start docker; \
    #       (systemctl start docker || sudo systemctl start docker || true); \
    #       echo ==== docker version; \
    #       (docker --version || sudo docker --version || echo no-docker); \
    #       echo ==== compose version; \
    #       (docker compose version || docker-compose --version || sudo docker compose version || sudo docker-compose --version || echo no-compose); \
    #       echo ==== launching compose ...; \
    #       if docker compose version >/dev/null 2>&1; then (docker compose up -d || sudo docker compose up -d); else (docker-compose up -d || sudo docker-compose up -d); fi; \
    #       echo ==== running containers; \
    #       (docker ps || sudo docker ps) | grep -i airflow || true'"
    
    #     jq -n --arg s "$SCRIPT" '{commands: [$s]}' > params.json
    
    #     CMD_ID=$(aws ssm send-command \
    #       --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
    #       --document-name "AWS-RunShellScript" \
    #       --comment "Start Airflow via SSM (force bash, compat)" \
    #       --region ${{ secrets.AWS_REGION }} \
    #       --parameters file://params.json \
    #       --query "Command.CommandId" --output text)
    
    #     echo "SSM Command ID: $CMD_ID"
    
    #     set +e
    #     aws ssm wait command-executed \
    #       --command-id "$CMD_ID" \
    #       --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
    #       --region ${{ secrets.AWS_REGION }}
    #     set -e
    
    #     OUT_JSON=$(aws ssm get-command-invocation \
    #       --command-id "$CMD_ID" \
    #       --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
    #       --region ${{ secrets.AWS_REGION }} \
    #       --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}' \
    #       --output json)
    #     echo "$OUT_JSON"
    
    #     STATUS=$(echo "$OUT_JSON" | sed -n 's/.*"Status":[[:space:]]*"\([^"]*\)".*/\1/p')
    #     echo "Final SSM status: $STATUS"
    #     if [ "$STATUS" != "Success" ]; then
    #       echo "SSM command failed (status=$STATUS). See logs above."
    #       exit 1
    #     fi


      

    

    



