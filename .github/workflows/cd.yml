
name: CD

permissions:
  id-token: write
  contents: read

# on:
#   workflow_run:
#     workflows: ["CI"]   # 必须和 CI workflow 的 name 完全一致
#     types: [completed]
#     branches: [main]       # 只有 main 上的 CI 完成才触发

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    name: II.CD run_code
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}  # 仅当 CI 成功
    runs-on: ubuntu-latest
    steps:
    - name: 0.Check out Git repository
      uses: actions/checkout@v4

    - name: 1.Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}


    - name: 2.Start EC2 instance
    - name: 3.Run Airflow via SSM (robust + logs even on failure)
      run: |
        set -euo pipefail
    
        CMD_ID=$(aws ssm send-command \
          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Start Airflow via SSM" \
          --region ${{ secrets.AWS_REGION }} \
          --parameters '{"workingDirectory":["/opt/airflow"],"commands":[
            "set -e",
            "echo ==== whoami && whoami",
            "echo ==== id && id",
            "echo ==== try start docker daemon",
            "(systemctl start docker || sudo systemctl start docker || true)",
            "echo ==== docker version",
            "(docker --version || sudo docker --version || echo no-docker)",
            "echo ==== compose version",
            "(docker compose version || docker-compose --version || sudo docker compose version || sudo docker-compose --version || echo no-compose)",
            "echo ==== launching compose ...",
            "if docker compose version >/dev/null 2>&1; then (docker compose up -d || sudo docker compose up -d); else (docker-compose up -d || sudo docker-compose up -d); fi",
            "echo ==== running containers",
            "(docker ps || sudo docker ps) | grep -i airflow || true"
          ]}' \
          --query "Command.CommandId" --output text)
    
        echo "SSM Command ID: $CMD_ID"
    
        # ⚠️ 等待时不要让失败直接终止脚本（否则拿不到日志）
        set +e
        aws ssm wait command-executed \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }}
        WAITER_RC=$?
        set -e
    
        # 拉取 StdOut/StdErr
        OUT_JSON=$(aws ssm get-command-invocation \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}' \
          --output json)
        echo "$OUT_JSON"
    
        # 解析最终状态，显式控制成功/失败
        STATUS=$(echo "$OUT_JSON" | sed -n 's/.*"Status":[[:space:]]*"\([^"]*\)".*/\1/p')
        echo "Final SSM status: $STATUS"
        if [ "$STATUS" != "Success" ]; then
          echo "SSM command failed (status=$STATUS). See logs above."
          exit 1
        fi


      

    

    



