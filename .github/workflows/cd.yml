
name: CD

permissions:
  id-token: write
  contents: read

# on:
#   workflow_run:
#     workflows: ["CI"]   # 必须和 CI workflow 的 name 完全一致
#     types: [completed]
#     branches: [main]       # 只有 main 上的 CI 完成才触发

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    name: II.CD run_code
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}  # 仅当 CI 成功
    runs-on: ubuntu-latest
    steps:
    - name: 0.Check out Git repository
      uses: actions/checkout@v4

    - name: 1.Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}



    - name: 2.Start EC2 instance
      run: |
        aws ec2 start-instances         --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        #确认连接成功
        aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        echo "✅ EC2 instance is running"
        
    - name: 3.Run Airflow via SSM (prod, compose v2)
      run: |
        set -euo pipefail
    
        CMD_ID=$(aws ssm send-command \
          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Start Airflow via SSM (bash + compose v2)" \
          --region ${{ secrets.AWS_REGION }} \
          --parameters '{"commands":[
            "/bin/bash -lc '\''set -e; \
              cd /opt/airflow; \
              sudo systemctl start docker || true; \
              sudo docker compose up -d; \
              sudo docker compose ps'\''"
          ]}' \
          --query "Command.CommandId" --output text)
    
        echo "SSM Command ID: $CMD_ID"
    
        # 即使失败也先拿日志
        set +e
        aws ssm wait command-executed \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }}
        set -e
    
        OUT_JSON=$(aws ssm get-command-invocation \
          --command-id "$CMD_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}' \
          --output json)
        echo "$OUT_JSON"
    
        STATUS=$(echo "$OUT_JSON" | sed -n 's/.*"Status":[[:space:]]*"\([^"]*\)".*/\1/p')
        echo "Final SSM status: $STATUS"
        if [ "$STATUS" != "Success" ]; then
          echo "SSM command failed (status=$STATUS). See logs above."
          exit 1
        fi
    


      

    

    



